# frozen_string_literal: true

require "rake/testtask"

require_relative "test/config"
require_relative "test/support/config"

def run_without_aborting(*tasks)
  errors = []

  tasks.each do |task|
    begin
      Rake::Task[task].invoke
    rescue Exception
      errors << task
    end
  end

  abort "Errors running #{errors.join(', ')}" if errors.any?
end

desc "Run cockroachdb tests by default"
task default: :test

task :package

desc "Run cockroachdb tests"
task :test do
  tasks = %w(test_cockroachdb)
  run_without_aborting(*tasks)
end

namespace :test do
  task :isolated do
    tasks = %w(isolated_test_cockroachdb)
    run_without_aborting(*tasks)
  end
end

desc "Build CockroachDB test databases"
namespace :db do
  task create: ["db:cockroachdb:build"]
  task drop: ["db:cockroachdb:drop"]
end


%w( cockroachdb sqlite3 ).each do |adapter|
  namespace :test do
    Rake::TestTask.new(adapter => "#{adapter}:env") { |t|
      adapter_short = adapter == "db2" ? adapter : adapter[/^[a-z0-9]+/]
      t.libs << "test"
      t.test_files = (Dir.glob("test/cases/**/*_test.rb").reject {
        |x| x.include?("/adapters/")
      } + Dir.glob("test/cases/adapters/#{adapter_short}/**/*_test.rb"))

      t.warning = true
      t.verbose = true
    }

    namespace :isolated do
      task adapter => "#{adapter}:env" do
        adapter_short = adapter == "db2" ? adapter : adapter[/^[a-z0-9]+/]
        puts [adapter, adapter_short].inspect
        (Dir["test/cases/**/*_test.rb"].reject {
          |x| x.include?("/adapters/")
        } + Dir["test/cases/adapters/#{adapter_short}/**/*_test.rb"]).all? do |file|
          sh(Gem.ruby, "-w", "-Itest", file)
        end || raise("Failures")
      end
    end
  end

  namespace adapter do
    task test: "test_#{adapter}"
    task isolated_test: "isolated_test_#{adapter}"

    # Set the connection environment for the adapter
    task(:env) { ENV["ARCONN"] = adapter }
  end

  # Make sure the adapter test evaluates the env setting task
  task "test_#{adapter}" => ["#{adapter}:env", "test:#{adapter}"]
  task "isolated_test_#{adapter}" => ["#{adapter}:env", "test:isolated:#{adapter}"]
end

# cockroach_cli_options takes a database config (found in config.yml)
# and generates the CLI options corresponding to it.
def cockroach_cli_options(config)
  opts = ""
  if config['sslmode'] == 'disable'
    opts += "--insecure "
  end
  return opts
end

namespace :db do
  namespace :cockroachdb do
    desc "Build the CockroachDB test databases"
    task :build do
      config = ARTest.config["connections"]["cockroachdb"]

      %x( cockroach sql #{cockroach_cli_options(config["arunit"])} -e "CREATE DATABASE #{config["arunit"]["database"]}" )
      %x( cockroach sql #{cockroach_cli_options(config["arunit2"])} -e "CREATE DATABASE #{config["arunit2"]["database"]}" )
    end

    desc "Drop the CockroachDB test databases"
    task :drop do
      config = ARTest.config["connections"]["cockroachdb"]
      %x( cockroach sql #{cockroach_cli_options(config["arunit"])} -e "sql_safe_updates = true; DROP DATABASE IF EXISTS #{config["arunit"]["database"]}" )
      %x( cockroach sql #{cockroach_cli_options(config["arunit2"])} -e "sql_safe_updates = true; DROP DATABASE IF EXISTS #{config["arunit2"]["database"]}" )
    end

    desc "Rebuild the CockroachDB test databases"
    task rebuild: [:drop, :build]
  end
end

task build_cockroachdb_databases: "db:cockroachdb:build"
task drop_cockroachdb_databases: "db:cockroachdb:drop"
task rebuild_cockroachdb_databases: "db:cockroachdb:rebuild"

task :lines do
  load File.expand_path("../tools/line_statistics", __dir__)
  files = FileList["lib/active_record/**/*.rb"]
  CodeTools::LineStatistics.new(files).print_loc
end
